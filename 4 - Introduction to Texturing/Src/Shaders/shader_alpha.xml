<shader>
    <vshader>
        <![CDATA[
        precision highp float;
        attribute vec3 vertex;
        attribute vec3 normal;
        attribute vec3 tangent;
        attribute vec3 color;
        attribute vec2 UV;
            
        uniform mat4 Model_Matrix;
        uniform mat4 View_Matrix;
        uniform mat4 Proj_Matrix;
        uniform mat4 Normal_Matrix;
            
        varying vec3 outNormal;
        varying vec3 outColor;
        varying vec2 outUV;
            
        uniform vec3 u_lightDir0;
        uniform vec3 u_lightDir1;
            
        varying vec3 v_SurfToCamera;
        varying vec3 v_SurfToLight0;
        varying vec3 v_SurfToLight1;
            
        void main()
        {
            mat4 mvpMat = Proj_Matrix * View_Matrix * Model_Matrix;
            mat4 mvMat = View_Matrix * Model_Matrix;
            
            gl_Position = mvpMat * vec4(vertex,1.0);
            outColor = color;
            outUV = UV;
            
            //--------------------------------------------------------
            
            outNormal = vec3(Normal_Matrix * vec4(normal, 0.0));
            
            vec3 vsPosition = vec3(mvMat*vec4(vertex,1.0));
            vec3 vsSurfToLight0 = vec3(View_Matrix * vec4(-u_lightDir0,0.0));
            vec3 vsSurfToLight1 = vec3(View_Matrix * vec4(-u_lightDir1,0.0));
            v_SurfToCamera = -vsPosition;
            v_SurfToLight0 = vsSurfToLight0;
            v_SurfToLight1 = vsSurfToLight1;
        }
        ]]>
    </vshader>
    <fshader>
        <![CDATA[
        precision mediump float;
          
        uniform sampler2D texture0;
            
        varying vec3 outNormal;
        varying vec3 outColor;
        varying vec2 outUV;
            
        uniform vec3 u_lightColor0;
        uniform vec3 u_lightColor1;
            
        varying vec3 v_SurfToCamera;
        varying vec3 v_SurfToLight0;
        varying vec3 v_SurfToLight1;
            
        void main()
        {
            vec3 Normal = normalize(outNormal);
            vec3 SurfToCamera = normalize(v_SurfToCamera);
            vec3 SurfToLight0 = normalize(v_SurfToLight0);
            vec3 SurfToLight1 = normalize(v_SurfToLight1);
		    
            // Dominant Directional Light (Sun):
            float diffuse0 = max(0.0,dot(Normal,SurfToLight0));
            
            // Scattered Directional Light:
            float diffuse1 = max(0.0,dot(Normal,SurfToLight1));
            
            vec3 diffuseColor = diffuse0 * u_lightColor0 + diffuse1 * u_lightColor1;
            
            // B481-TODO:
            // Fetch a color from the texture, texture0, using the interpolated UV coordinates.
            //vec4 textureColor = vec4(0.5); //texture2D(...);
            vec4 textureColor = texture2D(texture0, outUV);
            
            // B481-TODO:
            // Output the alpha channel from the texture:
            gl_FragColor = vec4(diffuseColor * textureColor.rgb * outColor, textureColor.a);
            
        }
		]]>
    </fshader>
</shader>

